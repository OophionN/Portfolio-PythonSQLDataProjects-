#!/usr/bin/env python
# coding: utf-8

# # Исследование надежности заемщиков
# 

# Во второй части проекта вы выполните шаги 3 и 4. Их вручную проверит ревьюер.
# Чтобы вам не пришлось писать код заново для шагов 1 и 2, мы добавили авторские решения в ячейки с кодом. 
# 
# 

# ## Откройте таблицу и изучите общую информацию о данных

# **Задание 1. Импортируйте библиотеку pandas. Считайте данные из csv-файла в датафрейм и сохраните в переменную `data`. Путь к файлу:**
# 
# `/datasets/data.csv`

# In[1]:


import pandas as pd

try:
    data = pd.read_csv('/datasets/data.csv')
except:
    data = pd.read_csv('https://code.s3.yandex.net/datasets/data.csv')


# **Задание 2. Выведите первые 20 строчек датафрейма `data` на экран.**

# In[2]:


data.head(20)


# **Задание 3. Выведите основную информацию о датафрейме с помощью метода `info()`.**

# In[3]:


data.info()


# ## Предобработка данных

# ### Удаление пропусков

# **Задание 4. Выведите количество пропущенных значений для каждого столбца. Используйте комбинацию двух методов.**

# In[4]:


data.isna().sum ()


# **Задание 5. В двух столбцах есть пропущенные значения. Один из них — `days_employed`. Пропуски в этом столбце вы обработаете на следующем этапе. Другой столбец с пропущенными значениями — `total_income` — хранит данные о доходах. На сумму дохода сильнее всего влияет тип занятости, поэтому заполнить пропуски в этом столбце нужно медианным значением по каждому типу из столбца `income_type`. Например, у человека с типом занятости `сотрудник` пропуск в столбце `total_income` должен быть заполнен медианным доходом среди всех записей с тем же типом.**

# In[5]:


for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['total_income'].isna()), 'total_income'] =     data.loc[(data['income_type'] == t), 'total_income'].median()


# ### Обработка аномальных значений

# **Задание 6. В данных могут встречаться артефакты (аномалии) — значения, которые не отражают действительность и появились по какой-то ошибке. таким артефактом будет отрицательное количество дней трудового стажа в столбце `days_employed`. Для реальных данных это нормально. Обработайте значения в этом столбце: замените все отрицательные значения положительными с помощью метода `abs()`.**

# In[6]:


data['days_employed'] = data['days_employed'].abs()


# **Задание 7. Для каждого типа занятости выведите медианное значение трудового стажа `days_employed` в днях.**

# In[7]:


data.groupby('income_type')['days_employed'].agg('median')


# У двух типов (безработные и пенсионеры) получатся аномально большие значения. Исправить такие значения сложно, поэтому оставьте их как есть.

# **Задание 8. Выведите перечень уникальных значений столбца `children`.**

# In[8]:


data['children'].unique()


# **Задание 9. В столбце `children` есть два аномальных значения. Удалите строки, в которых встречаются такие аномальные значения из датафрейма `data`.**

# In[9]:


data = data[(data['children'] != -1) & (data['children'] != 20)]


# **Задание 10. Ещё раз выведите перечень уникальных значений столбца `children`, чтобы убедиться, что артефакты удалены.**

# In[10]:


data['children'].unique()


# ### Удаление пропусков (продолжение)

# **Задание 11. Заполните пропуски в столбце `days_employed` медианными значениями по каждого типа занятости `income_type`.**

# In[11]:


for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['days_employed'].isna()), 'days_employed'] =     data.loc[(data['income_type'] == t), 'days_employed'].median()


# **Задание 12. Убедитесь, что все пропуски заполнены. Проверьте себя и ещё раз выведите количество пропущенных значений для каждого столбца с помощью двух методов.**

# In[12]:


data.isna().sum()


# ### Изменение типов данных

# **Задание 13. Замените вещественный тип данных в столбце `total_income` на целочисленный с помощью метода `astype()`.**

# In[13]:


data['total_income'] = data['total_income'].astype(int)


# ### Обработка дубликатов

# **Задание 14. Обработайте неявные дубликаты в столбце `education`. В этом столбце есть одни и те же значения, но записанные по-разному: с использованием заглавных и строчных букв. Приведите их к нижнему регистру.**

# In[14]:


data['education'] = data['education'].str.lower()


# **Задание 15. Выведите на экран количество строк-дубликатов в данных. Если такие строки присутствуют, удалите их.**

# In[15]:


data.duplicated().sum()


# In[16]:


data = data.drop_duplicates()


# ### Категоризация данных

# **Задание 16. На основании диапазонов, указанных ниже, создайте в датафрейме `data` столбец `total_income_category` с категориями:**
# 
# - 0–30000 — `'E'`;
# - 30001–50000 — `'D'`;
# - 50001–200000 — `'C'`;
# - 200001–1000000 — `'B'`;
# - 1000001 и выше — `'A'`.
# 
# 
# **Например, кредитополучателю с доходом 25000 нужно назначить категорию `'E'`, а клиенту, получающему 235000, — `'B'`. Используйте собственную функцию с именем `categorize_income()` и метод `apply()`.**

# In[17]:


def categorize_income(income):
    try:
        if 0 <= income <= 30000:
            return 'E'
        elif 30001 <= income <= 50000:
            return 'D'
        elif 50001 <= income <= 200000:
            return 'C'
        elif 200001 <= income <= 1000000:
            return 'B'
        elif income >= 1000001:
            return 'A'
    except:
        pass


# In[18]:


data['total_income_category'] = data['total_income'].apply(categorize_income)


# **Задание 17. Выведите на экран перечень уникальных целей взятия кредита из столбца `purpose`.**

# In[19]:


data['purpose'].unique()


# **Задание 18. Создайте функцию, которая на основании данных из столбца `purpose` сформирует новый столбец `purpose_category`, в который войдут следующие категории:**
# 
# - `'операции с автомобилем'`,
# - `'операции с недвижимостью'`,
# - `'проведение свадьбы'`,
# - `'получение образования'`.
# 
# **Например, если в столбце `purpose` находится подстрока `'на покупку автомобиля'`, то в столбце `purpose_category` должна появиться строка `'операции с автомобилем'`.**
# 
# **Используйте собственную функцию с именем `categorize_purpose()` и метод `apply()`. Изучите данные в столбце `purpose` и определите, какие подстроки помогут вам правильно определить категорию.**

# In[20]:


def categorize_purpose(row):
    try:
        if 'автом' in row:
            return 'операции с автомобилем'
        elif 'жил' in row or 'недвиж' in row:
            return 'операции с недвижимостью'
        elif 'свад' in row:
            return 'проведение свадьбы'
        elif 'образов' in row:
            return 'получение образования'
    except:
        return 'нет категории'


# In[21]:


data['purpose_category'] = data['purpose'].apply(categorize_purpose)


# ### Шаг 3. Исследуйте данные и ответьте на вопросы

# #### 3.1 Есть ли зависимость между количеством детей и возвратом кредита в срок?

# In[22]:


#data ['debt'].unique ()
def analysis (row, argument): #функия категорирования клиентов, аргумент определет какой участок нужно выполнять и для кого категорирования
    child = row ['children']
    debt = row ['debt']
    income = row ['total_income_category']
    status = row ['family_status']
    purpose = row ['purpose_category']
#    status_id = row ['category_debt_family']
    
    if argument == 0:  # аргумент 0 - запускается участок для расчета с детьми
        try:
            if debt == 1:
                return 'просрочка есть, детей', child 
            elif debt == 0:
                return 'без просрочки, детей', child
            else:
                return 'проверь данные'
        
        except:
            return 'ошибка. Блок (дети) '
    
    
    if argument == 1:  # аргумент 1 - запускается участок для расчета по семейному положению
        try:
            if 'не' in status or 'вдов' in status or 'развод' in status:
                # укрупняем категории
                return 'холост (ая)'
                
            else:
                return 'семейный (ая)'
                
        except:
            return 'ошибка. Блок (семья)'
        
    
    if argument == 2:  # аргумент 2 - запускается участок для расчета по уровню дохода
        try:
            if income == 'A':
                if debt == 1:
                    return 'доход от 1000001, есть просрочка (A1)'
                else:
                    return 'доход от 1000001, нет просрочки (A0)'
            elif income == 'B':
                if debt == 1:
                    return 'доход от 200001, есть просрочка (B1)'
                else:
                    return 'доход от 200001, нет просрочки (B0)'
            elif income == 'C':
                if debt == 1:
                    return 'доход от 50001, есть просрочка (C1)'
                else:
                    return 'доход от 50001, нет просрочки (C0)'
            elif income == 'D':
                if debt == 1:
                    return 'доход от 30001, есть просрочка (D1)'
                else:
                    return 'доход от 30001, нет просрочки (D0)'   
            elif income == 'E':
                if debt == 1:
                    return 'доход до 30000, есть просрочка (E1)'
                else:
                    return 'доход до 30000, нет просрочки (E0)'      
            
            else:
                return 'проверь данные'
        
        except:
            return 'ошибка. Блок (доход)'
        
        
    if argument == 3:  # аргумент 3 - запускается участок для расчета по целям кредитования
        try:
            if 'авто' in purpose:
                if debt == 1:
                    return 'Авто, есть просрочка (avto1)'
                else:
                    return 'Авто, нет просрочки (avto0)'
            elif 'недвиж' in purpose:
                if debt == 1:
                    return 'Жилье, есть просрочка (house1)'
                else:
                    return 'Жилье, нет просрочки (house0)'
            elif 'свад' in purpose:
                if debt == 1:
                    return 'Свадьба, есть просрочка (wedding1)'
                else:
                    return 'Свадьба, нет просрочки (wedding0)'
                
            elif 'образ' in purpose:
                if debt == 1:
                    return 'Учеба, есть просрочка (study1)'
                else:
                    return 'Учеба, нет просрочки (study0)'
                
            else:
                return 'проверь данные'
        except:
            return 'ошибка. Блок (семья)'

    
data ['category_debt_child'] = data.apply (analysis, argument=0, axis=1) # дополняем таблицу клиенов по количеству детей и просрочке

data.groupby('children')['debt'].agg(['sum', 'count', 'mean']).style.format({('mean'): '{:,.2%}'.format})


# Ваш код будет здесь. Вы можете создавать новые ячейки.


# **Вывод:** из однозначного - чем больше детей у клиентов, тем реже они берут/получают кредиты. Стоит отметить, что клиенты без детей немного лучше платят кредиты (разница от 0.64% до 2.22%), учитывая абсолютные показатели, что, в общем и целом, можно отнести к допустимой погрешности. Но если брать в расчет не 20000 клиентов, а кратно большее количество, то разница в 2.22% станет значительной, так как цена вопроса может исчисляться миллионами. Прим. отсутствие просрочки среди клиентов с 5-тью детьми не показательна, очень маленькое количество выданных кредитов. 
# 
# OT. Не смог придумать функцию для упрощения подсчета соотношений, так как с 5-ью детьми нет в таблицы просрочников, а принудительно дописывать не хотел, хотел, чтобы это было автоматически. если есть возможность прошу подсказать как это можно сделать, чтобы процесс прошел с просто с 2 функциями
# 

# #### 3.2 Есть ли зависимость между семейным положением и возвратом кредита в срок?

# In[24]:


#data ['family_status'].unique () # 'женат / замужем', 'гражданский брак', 'вдовец / вдова','в разводе', 'Не женат / не замужем'

# дополняем таблицу категориями клиентов по семейному. делаем смысловое укрупнение статуса

data ['category_debt_family_id'] = data.apply (analysis, argument=1, axis=1)  


#Группируем клиентов по категориям и расчитываем соотношение просрочки
data.groupby('category_debt_family_id') ['debt'].agg(['sum', 'count', 'mean']).style.format({('mean'): '{:,.2%}'.format})



# Ваш код будет здесь. Вы можете создавать новые ячейки.


# **Вывод:** как видно из результатов, доля просрочки среди холостых на 0.51% больше чем доля просрочки среди семейных. 

# #### 3.3 Есть ли зависимость между уровнем дохода и возвратом кредита в срок?

# In[27]:



data ['category_debt_income'] = data.apply (analysis, argument=2, axis=1) # дополняем таблицу категориями клиентов по уровню дохода и просрочке

calculation_df = data ['category_debt_income']. value_counts ().sort_index(ascending=False).to_frame().reset_index ()
print (calculation_df, '\n')


ratio_income_A = calculation_df.loc [7, 'category_debt_income'] / (calculation_df.loc [6, 'category_debt_income'] +                                                            calculation_df.loc [7, 'category_debt_income'])
print (f' Доля просрочки среди состоятельных клиентов (категория A): {ratio_income_A:.2%}' '\n')

ratio_income_B = calculation_df.loc [5, 'category_debt_income'] / (calculation_df.loc [5, 'category_debt_income'] +                                                            calculation_df.loc [4, 'category_debt_income'])
print (f' Доля просрочки среди состоятельных клиентов (категория B): {ratio_income_B:.2%}' '\n')

ratio_income_C = calculation_df.loc [1, 'category_debt_income'] / (calculation_df.loc [1, 'category_debt_income'] +                                                            calculation_df.loc [0, 'category_debt_income'])
print (f' Доля просрочки среди состоятельных клиентов (категория C): {ratio_income_C:.2%}' '\n')

ratio_income_D = calculation_df.loc [3, 'category_debt_income'] / (calculation_df.loc [2, 'category_debt_income'] +                                                            calculation_df.loc [3, 'category_debt_income'])
print (f' Доля просрочки среди состоятельных клиентов (категория D): {ratio_income_D:.2%}' '\n')


ratio_income_E = calculation_df.loc [9, 'category_debt_income'] / (calculation_df.loc [9, 'category_debt_income'] +                                                            calculation_df.loc [8, 'category_debt_income'])
print (f' Доля просрочки среди состоятельных клиентов (категория E): {ratio_income_E:.2%}' '\n')
# Ваш код будет здесь. Вы можете создавать новые ячейки.


# **Вывод:** В процентном соотношении хуже всех платят клиенты с доходами до 30000. но их небольшое количество в общей массе клиентов. Самые исполнительные клиенты с доходами от 30000 до 50000

# #### 3.4 Как разные цели кредита влияют на его возврат в срок?

# In[26]:


data ['category_debt_purpose'] = data.apply (analysis, argument=3, axis=1) # дополняем таблицу категориями клиентов по целям и просрочке

#переобъявляем ранее использованную таблицу, используется как буферная зона при анализе, чтобы не генерировать переменные
calculation_df = data ['category_debt_purpose']. value_counts ().sort_index(ascending=False).to_frame().reset_index ()
print (calculation_df, '\n')


# расчитываем соотношение просрочки по категориям целей, выводим на экран

ratio_purpose_A = calculation_df.loc [1, 'category_debt_purpose'] / (calculation_df.loc [1, 'category_debt_purpose'] +                                                              calculation_df.loc [0, 'category_debt_purpose'])
print (f' Доля просрочки с целью "обучение": {ratio_purpose_A:.2%}' '\n')

ratio_purpose_B = calculation_df.loc [3, 'category_debt_purpose'] / (calculation_df.loc [3, 'category_debt_purpose'] +                                                              calculation_df.loc [2, 'category_debt_purpose'])
print (f' Доля просрочки с целью "свадьба": {ratio_purpose_B:.2%}' '\n')

ratio_purpose_C = calculation_df.loc [5, 'category_debt_purpose'] / (calculation_df.loc [5, 'category_debt_purpose'] +                                                              calculation_df.loc [4, 'category_debt_purpose'])
print (f' Доля просрочки с целью "недвижимость": {ratio_purpose_C:.2%}' '\n')

ratio_purpose_D = calculation_df.loc [7, 'category_debt_purpose'] / (calculation_df.loc [7, 'category_debt_purpose'] +                                                              calculation_df.loc [6, 'category_debt_purpose'])
print (f' Доля просрочки с целью "автомобиль": {ratio_purpose_D:.2%}' '\n')


# Ваш код будет здесь. Вы можете создавать новые ячейки.


# **Вывод:** Наибольший уровень просрочки в категориях "автомобиль" и "обучение". Вероятные причины: "обучение" - отложенная инвестиция в себя, пока студент учится, получить постоянный стабильный доход бывает сложно, "автомобиль" - каждый день теряет в цене, требует определенное обслуживание, расходники, зачастую клиенты при приобретении автомобиля, смотря на размер ежемесячного платежа (вводит в заблуждение сумма платежа к стоимости автомобиля), некорректно оценивают свои финансовые возможности, и берут автомобиль значительно дороже изначальных планов, не беря указанное выше в части дополнительных расходов, во внимание. Причина более низкой просрочки в категории "недвижимость" - наличие высоколиквидного залога в виде объекта недвижимости, потеря жилья более сильный мотиватор соблюдения графика платежей. "Свадьба" - обычный потребительский кредит, и, могу предположить, часть его закрывается заемщикам с подарков, плюс, после свадьбы появляется совместный доход, а как показал анализ ранее, семейные люди чуть более лучше платят кредиты. Прим. колчественный показатель среди целевого назначения распределен более равномерно. Только покупка жилья имеет большее количество среди целей, так как стоиомсть жилья значительная, и мало кто может себе позволить купить жилье сразу, а если брать в расчет коммерческую недвижимость, то ее стоиомость значительно выше жилой, и учитывая цель - скорее всего кредит на развитие бизнеса, а из оборота взять крупные сумму сложно. 

# #### 3.5 Приведите возможные причины появления пропусков в исходных данных.

# Данные отсутствуют только в 2-х разделах: стаж и доход, причем одновременно. А учитывая, что пропуски не имеют однозначного "лидера" по типу занятости (лидер - позиция "сотрудник" на которого приходится около 50% пропусков), можно сделать следующий вывод: В разделе трудовой стаж минимальные значения после модулирования, начинается от 24 дней, и взяв во внимание, что в доходе минимальные значения начинаются от 20667, прихожу к выводу, что с высокой долей вероятности пропущены значения у заемщиков, которые только устроились на работу/работают непродолжительное время и не успели получить ЗП. На это косвенно также указывает распределение пропусков по должностям (прим."лидер" - сотрудник, возможно люди еще не знают точное название своей должности, знакомо в личном опыте). Прим. можно, конечно, дать волю фантазии и предположить, что при оформлении кредитов данные получаются из систем ФНС или ФСС/ПФ, то там может сразу отображаться информация о текущей официальной занятости, но еще без уровня ЗП
# 
# 

# #### 3.6 Объясните, почему заполнить пропуски медианным значением — лучшее решение для количественных переменных.

# *Ответ:* так как значения количественные, есть конкретный цифры, расчет сам по себе не вызовет сложностей. Но брать среднее некорректно, так как может получится как с уровнем средней з/п по стране, у 1 млн. человек зп около 20000, а у 10000 человек больше 5000000, в итоге средняя будет некорректно завышена. При потенциально большом разбросе в значениях и достаточно большой выгрузке, медиативное значение будет максимально близко к объективной цифре.

# ### Шаг 4: общий вывод.

# <div class="alert alert-info">
#    <font color='4682B4'><u><b>вывод</b></u></font>
#     <br />
# Проведя анализ представленного датафрейма, с целью определения кредитоспособности и платёжеспособности клиентов, с изучением целей, семейного положения, состава семьи и уровня дохода, могу сделать следующие выводы в рамках поставленных вопросов/гипотез: 
#     <br />
# <font color='4682B4'><u><b> 1.	Есть ли зависимость между количеством детей и возвратом кредита в срок? (зависимость установлена. Требуется учитывать прогноз в перспективе)</b></u></font>
#     <br />
# В срезе текущего состава семьи на момент оформления кредита, меньше всего просрочка клиентов без детей (7,54%) и таких клиентов подавляющее большинство в выгрузке. Однако, взяв во внимание, что часть клиентов в средне-срочной перспективе по среднему сроку жизни кредита – 5 лет, с высокой долей вероятности, перейдет в группу с детьми, и будет проходить этапы с 1\2 детьми, то клиенты из группы «без детей» и просрочкой в 7,54% перейдут в группы «с 1 ребенком» и «2 ребенка», в которых самая высокая просрочка по результатам анализа – 9,23% и 9,45% соответственно. 
# Прим. Брать в детальный разбор группы с 3-мя, 4-мя и 5-тью детьми нецелесообразно, так как их суммарное количество значительно ниже любой из рассмотренных групп. Для проведения комплексного анализа в срезе «дети» от 3 и более, необходимо больший объем выгрузки.  
# 
# Результат анализа просрочки по количеству детей (в процентах соотношение общего количества заемщиков к просрочке внутри группы):
# •	Заемщик без детей – 7,54% (всего 14091 заемщик)
# •	Заемщик с 1 ребенком – 9,23% (4808 заемщик)
# •	Заемщик с 2 детьми – 9,45% (2052 заемщик)
# •	Заемщик с 3 детьми – 8,18% (330 заемщиков)
# •	Заемщик с 4 детьми – 9,76% (41 заемщик)
# •	Заемщик с 5 детьми – 0% (9 заемщиков)
#     <br />
# 
# <font color='4682B4'><u><b>2.	Есть ли зависимость между семейным положением и возвратом кредита в срок? (зависимость установлена частично)</b></u></font>
#     <br />
# В результате анализа, после группирования категорий клиентов по семейному статусу в логические группы (заемщик одинокий или нет) получены следующие показатели:
# •	Семейные заемщики. Доля просрочки составляет 8,00%. Общее количество заемщиков составило – 16395 человек. В группу вошли: женатые/замужние и проживающие в гражданском браке. 
# •	Не семейные заемщики. Доля просрочки составила 8,51%. Общее количество заемщиков составило – 4936 человек. В группу вошли: не женатые/ не замужние, разведенные, вдовцы/вдовы. 
# 
# Учитывая результаты анализа, прихожу выводу, что семейные заемщики платят лучше на 0,51% процента, на первый взгляд разница несущественная, но беря во внимание общий портфель выдаваемых кредитов, сумма может быть значительной. Рекомендуется брать данный показатель в расчет в качестве приоритета не первой очереди, а как сопутствующий к основной модели.
#     <br />
# 
# <font color='4682B4'><u><b> 3.	Есть ли зависимость между уровнем дохода и возвратом кредита в срок? (требуется больше данных)</b></u></font>
#     <br />
# Опираясь только на проценты в результате анализа, можно сделать вывод, что люди с доходом до 30000 рублей допускают чаще всего просрочку – 9,09%. Однако, их количество во общем срезе крайне мало (всего 22 заемщика), аналогичная ситуация с заемщиками, доход которых находятся более 1000000 – 8,00%. Максимальный уровень просрочки у заемщиков с доходом 50000-100000 –  8,50 %.. Минимальный уровень просрочки у заемщиков с доходом 30000-50000 –  6,02 %.. 
# 
# Проводя анализ, несмотря на рост вместе с доходом платежеспособности заемщика, кредитоспособность не повышается, что может указывать на снижение общей тенденции в части финансовой исполнительности клиентов при повышении доходов. 
# Для более корректного анализа требуется более репрезентативная выгрузка, для формирования объективного вывода в отношении всех групп заемщиков.
# •	Доля просрочки среди клиентов (категория A): 8.00% (общее количество – 25 заемщиков)
# 
# •	Доля просрочки среди клиентов (категория B): 7.06% (общее количество – 5014 заемщиков)
# 
# •	Доля просрочки среди клиентов (категория C): 8.50% (общее количество – 15921 заемщик)
# 
# •	Доля просрочки среди клиентов (категория D): 6.02% (общее количество – 349 заемщиков)
# 
# •	Доля просрочки среди клиентов (категория E): 9.09% (общее количество – 22 заемщика)
#     <br />
# 
# <font color='4682B4'><u><b> 4.	Как разные цели кредита влияют на его возврат в срок? (зависимость установлена) </b></u></font>
#     <br />
# Наибольший уровень просрочки в категориях "автомобиль" и "обучение" – 9,35% и 9,25% соответственно. 
# Самый низкий уровень просрочки в категории "недвижимость" – 7,26%.
# 
# Вероятные причины: "обучение" - отложенная инвестиция в себя, пока студент учится, получить постоянный стабильный доход бывает сложно, "автомобиль" - каждый день теряет в цене, требует определенное обслуживание, расходники, зачастую клиенты при приобретении автомобиля, смотря на размер ежемесячного платежа (вводит в заблуждение сумма платежа к стоимости автомобиля), некорректно оценивают свои финансовые возможности, и берут автомобиль значительно дороже изначальных планов, не беря указанное выше в части дополнительных расходов, во внимание. Причина более низкой просрочки в категории "недвижимость" - наличие высоколиквидного залога в виде объекта недвижимости, потеря жилья более сильный мотиватор соблюдения графика платежей. "Свадьба" - обычный потребительский кредит, помимо одномоментного дополнительного дохода от самой свадьбы, меняется статус заемщика, с холостого на семейный, а как показал ранее проведенный анализ семейные люди платят лучше, и данные показатели косвенно подтверждаю ранее сделанные выводы.
# 
#  Доля просрочки с целью "обучение": 9.25%
# 
#  Доля просрочки с целью "свадьба": 7.91%
# 
#  Доля просрочки с целью "недвижимость": 7.26%
# 
#  Доля просрочки с целью "автомобиль": 9.35%
#  
# </div>
